#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#define RAYTRACING

#include "../common.glsl"

layout(location = 0) rayPayloadEXT GPUHitPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1) uniform _SceneDesc { GPUSceneDesc sceneDesc; };
layout(std140, set = 0, binding = 2) readonly buffer _MeshInfo { GPUMeshInfo meshInfos[]; };
layout(std140, set = 0, binding = 3) readonly buffer _ProbeLocations { vec4 probeLocations[]; };
layout(set = 0, binding = 4) buffer _ProbeRaycastResult { GPUProbeRaycastResult results[]; };

layout(buffer_reference, scalar) readonly buffer Vertices { vec3 v[]; };
layout(buffer_reference, scalar) readonly buffer Indices { uint i[]; };
layout(buffer_reference, scalar) readonly buffer Normals { vec3 n[]; };
layout(buffer_reference, scalar) readonly buffer TexCoords { vec2 t[]; };

const float PI  = 3.14159265358979323846264;
const float SEED = PI;

void main()
{
    vec4 origin = probeLocations[gl_LaunchIDEXT.y];
    
    //This technique evenly distributes. Maybe it's not what I want
    float dirY = 1 - (gl_LaunchIDEXT.x / float(gl_LaunchSizeEXT.x - 1)) * 2;
    float radius = sqrt(1 - dirY * dirY);
    float theta = PHI * PI * gl_LaunchIDEXT.x;
    float dirX = cos(theta) * radius;
    float dirZ = sin(theta) * radius;
    vec3 direction = normalize(vec3(dirX, dirY, dirZ));

    /*
    //This method uniformly and randomly distributes points. But some directions are nan so using the other method
    float fi = float(gl_LaunchIDEXT.x);
    float theta = 2.0f * PI * goldNoise(vec2(fi * 0.3482f, fi * 2.18622f), SEED);
    float phi = acos(1.0f - 2.0f * goldNoise(vec2(fi * 1.9013, fi * 0.94312), SEED));
    float dirX = sin(phi) * cos(theta);
    float dirY = sin(phi) * sin(theta);
    float dirZ = cos(phi);
    vec4 direction = vec4(dirX, dirY, dirZ, 0);
    */

    //if(gl_LaunchIDEXT.x == 2087 && gl_LaunchIDEXT.y == 0) {
    //    debugPrintfEXT("WAITED ARGUMENT: %f %f %f\n", dirX, dirY, dirZ);
    //}


    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.0001;
    float tMax     = 10000.0;

    traceRayEXT(topLevelAS,     // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                tMin,           // ray min range
                direction.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload (location = 0)
    );

    //debugPrintfEXT("The origin is (probe: %d): %f , %f , %f \n and direction is: %f , %f , %f \n", gl_LaunchIDEXT.y, origin.x, origin.y, origin.z, direction.x, direction.y, direction.z);

    uint index = gl_LaunchIDEXT.x + gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y;
    results[index].worldPos = vec4(payload.pos, 1.0);
    results[index].lightmapUv = payload.lightmapUv;
    results[index].texUv = payload.texUv;
    results[index].objectId = payload.objectId;
    results[index].direction = vec4(direction, 0.0);

    if(payload.objectId > -1 && dot(direction.xyz, payload.normal) >= 0) {
        //debugPrintfEXT("%f %f %f vs %f %f %f\n", direction.x, direction.y, direction.z, payload.normal.x, payload.normal.y, payload.normal.z);
        //debugPrintfEXT("%f %f %f vs %f %f %f\n", origin.x, origin.y, origin.z, payload.pos.x, payload.pos.y, payload.pos.z);
        //results[index].objectId = -1;
        //debugPrintfEXT("Yes.\n");
    }
}