#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_debug_printf : enable

#include "common.glsl"

layout (local_size_x = 256) in;

layout(set = 0, binding = 0) uniform _Config { GIConfig config; };
layout(std430, set = 0, binding = 1) readonly buffer _InputBuffer1 { vec4 clusterProjectionColors[]; };
layout(std430, set = 0, binding = 2) readonly buffer _InputBuffer2 { vec4 receiverReconstructionMatrices[]; };
layout(std430, set = 0, binding = 3) readonly buffer _InputBuffer3 { ClusterReceiverInfo clusterReceiverInfos[]; };
layout(std430, set = 0, binding = 4) readonly buffer _InputBuffer4 { ivec4 clusterReceiverUvs[]; };
layout (set = 0, binding = 5, rgba32f) uniform image2D resultImage;

//imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
const float PI  = 3.14159265358979323846264;

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if(gID < config.clusterCount * config.maxReceiversInCluster) {
		uint cluster = gID / config.maxReceiversInCluster;
		uint receiverCount  = clusterReceiverInfos[cluster].receiverCount;
		uint j = gID % config.maxReceiversInCluster;

		if(j < receiverCount) {
			int offset = clusterReceiverInfos[cluster].receiverOffset * config.pcaCoefficient;
			vec4 result = vec4(0);

			for(int i = 0; i < config.pcaCoefficient; i++) {
				vec4 color = clusterProjectionColors[cluster * config.pcaCoefficient + i];
				uint index = offset + j * config.pcaCoefficient + i;
				
				result += receiverReconstructionMatrices[index / 4][index % 4] * color;
			}

			result = max(result, vec4(0));
			imageStore(resultImage, ivec2(clusterReceiverUvs[clusterReceiverInfos[cluster].receiverOffset + j].xy), result / (PI));
		}
	}
}
/*
TODO
Inputs:
	- Result from gi_cluster_projection
		32 * 1 matrix for each cluster (1000s)
	- Receiver reconstruction matrices
		1000s of (receiver count) * 32
	- Cluster receiver count data
	- Cluster receiver offset data
	- Receiver cluster uv map
		1000s of (receiver count)  * vec2
Calculation:
	- Matrix multiplication for each cluster
Output: 
	- (receiver count)  * 1 matrix for each cluster (1000s)
	- Save the result to a lightmap texture using uv map
*/