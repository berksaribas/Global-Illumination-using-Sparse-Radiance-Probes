#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#define RAYTRACING

#include "common.glsl"
#include "brdf.glsl"

layout(location = 0) rayPayloadEXT ReflectionPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(set = 2, binding = 0) uniform _CameraBuffer { GPUCameraData cameraData; };

layout(set = 1, binding = 0) uniform sampler2D gbufferAlbedoMetallic;
layout(set = 1, binding = 1) uniform sampler2D gbufferNormalMotion;
layout(set = 1, binding = 2) uniform sampler2D gbufferRoughnessDepthCurvatureMaterial;
layout(set = 1, binding = 3) uniform sampler2D gbufferUV;
layout(set = 1, binding = 4) uniform sampler2D gbufferDepth;
layout(set = 1, binding = 5) uniform sampler2D sobolSequence;
layout(set = 1, binding = 6) uniform sampler2D scramblingRankingTile;
layout(set = 1, binding = 7, rgba16f) uniform image2D resultImage;
layout(set = 1, binding = 8, rgba16f) uniform image2D resultNormalImage;

layout(set = 4, binding = 0) uniform sampler2D[] textures;
layout(std140, set = 5, binding = 0) readonly buffer MaterialBuffer{ GPUBasicMaterialData materials[]; };

//  Distributing Monte Carlo Errors as a Blue Noise in Screen Space by Permuting Pixel Seeds Between Frames 
//  https://belcour.github.io/blog/research/publication/2019/06/18/animation-bluenoise.html
float sample_blue_noise(ivec2 coord, int sample_index, int sample_dimension, sampler2D sobol_sequence_tex, sampler2D scrambling_ranking_tex)
{
	// wrap arguments
	coord.x = coord.x % 128;
	coord.y = coord.y % 128;
	sample_index = sample_index % 256;
	sample_dimension = sample_dimension % 4;

	// xor index based on optimized ranking
	int ranked_sample_index = sample_index ^ int(clamp(texelFetch(scrambling_ranking_tex, ivec2(coord.x, coord.y), 0).b * 256.0f, 0.0f, 255.0f));
	
    // fetch value in sequence
	int value = int(clamp(texelFetch(sobol_sequence_tex, ivec2(ranked_sample_index, 0), 0)[sample_dimension] * 256.0f, 0.0f, 255.0f));
	
    // If the dimension is optimized, xor sequence value based on optimized scrambling
	value = value ^ int(clamp(texelFetch(scrambling_ranking_tex, ivec2(coord.x, coord.y), 0)[sample_dimension % 2] * 256.0f, 0.0f, 255.0f));
	
    // convert to float and return
	float v = (0.5f + value) / 256.0f;
	return v;
}

vec2 next_sample(ivec2 coord)
{
    return vec2(sample_blue_noise(coord, int(cameraData.frameCount), 0, sobolSequence, scramblingRankingTile),
                sample_blue_noise(coord, int(cameraData.frameCount), 1, sobolSequence, scramblingRankingTile));
}

mat3 CalcONB(vec3 n)
{
	vec3 t = (n.y < 0.99) ? normalize(cross(vec3(0, 1, 0), n)) : vec3(1, 0, 0);
	vec3 b = cross(t, n);
	mat3 ret;
	ret[0] = t;
	ret[1] = n;
	ret[2] = b;
	return ret;
}

mat3 calculateTBN(vec3 dir) {
	const vec3 z = dir;
	const float sign_ = (z.z >= 0.0) ? 1.0 : -1.0;
	const float a = -1.0 / (sign_ + z.z);
	const float b = z.x * z.y * a;

	const vec3 x = vec3(1.0 + sign_ * a * pow(z.x, 2.0), sign_ * b, -sign_ * z.x);
	const vec3 y = vec3(b, sign_ + a * pow(z.y, 2.0), -z.y);

	return mat3(x, y, z);
}

void main()
{
	const ivec2 size = textureSize(gbufferAlbedoMetallic, 0);
	ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
	const vec2 pixelCenter = vec2(pixel) + vec2(0.5);
    const vec2 texCoord = pixelCenter / vec2(size);

	float depth = texelFetch(gbufferDepth, pixel, 0).r;
	vec3 worldPos = world_position_from_depth(texCoord, depth, cameraData.viewprojInverse) / 0.3;
	float metallic = texelFetch(gbufferAlbedoMetallic, pixel, 0).w;
	float roughness = texelFetch(gbufferRoughnessDepthCurvatureMaterial, pixel, 0).r;
	float roughnessSquared = roughness * roughness;
	int material = int(texelFetch(gbufferRoughnessDepthCurvatureMaterial, pixel, 0).w);
	float linearDepth = texelFetch(gbufferRoughnessDepthCurvatureMaterial, pixel, 0).g;
	vec3 normal = octohedral_to_direction(texelFetch(gbufferNormalMotion, pixel, 0).rg);

	vec3 view = normalize(cameraData.cameraPos.xyz / 0.3 - worldPos.xyz);
    vec3 direction = reflect(-view, normal);

	if(!(metallic == 0 && roughness == 1)) {
		uint rayFlags = gl_RayFlagsOpaqueEXT;
		uint cullMask = 0xff;
		float tmin = 0.001;
		float tmax = 100000.0;

		vec4 totalColor = vec4(0);
		if(cameraData.useStochasticSpecular == 1) {			
			{
				mat3 TBN = calculateTBN(normal);
				vec2 rnd = next_sample(pixel);
				//G1(Ve) * max(0, dot(Ve, Ne)) * D(Ne) / Ve.z
				vec3 microfacet =  sampleGGXVNDF(transpose(TBN) * view , roughnessSquared, roughnessSquared, rnd.x, rnd.y) ;
				direction = TBN * reflect(-(transpose(TBN) * view), microfacet);

				//vec4 Wh_pdf = importance_sample_ggx(next_sample(pixel), normal, roughness);
				//float pdf = Wh_pdf.w;
				//direction = reflect(-view, Wh_pdf.xyz);

				traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, worldPos + normal * 0.001, tmin, direction, tmax, 0);

				totalColor = vec4(clamp(payload.color, vec3(0), vec3(0.7)), max(0, payload.hitDistance));

				if(cameraData.glossyDenoise == 0) {
					if(cameraData.glossyFrameCount > 1){
						totalColor = mix(totalColor, imageLoad(resultImage, pixel), float(cameraData.glossyFrameCount) / float(cameraData.glossyFrameCount + 1));
					}
				}
			}
		}
		else {
			mat3 TBN = calculateTBN(normal);
			vec3 microfacet =  sampleGGXVNDF(transpose(TBN) * view , roughnessSquared, roughnessSquared, 0, 0 ) ;
			direction = TBN * reflect(-(transpose(TBN) * view), microfacet);

			traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, worldPos + normal * 0.001, tmin, direction, tmax, 0);
			totalColor = vec4(clamp(payload.color, vec3(0), vec3(0.7)), clamp(payload.hitDistance, 0, 10));
			//traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, worldPos + normal * 0.1, tmin, reflect(-view, normal), tmax, 0);
			imageStore(resultNormalImage, pixel, vec4(normal, linearDepth));
		}
		imageStore(resultImage, pixel, totalColor);
	}
	else {
		imageStore(resultImage, pixel, vec4(0, 0, 0, -1));
		imageStore(resultNormalImage, pixel, vec4(vec3(0), -1));
	}
}