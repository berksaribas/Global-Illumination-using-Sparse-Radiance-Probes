#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#define RAYTRACING

#include "common.glsl"

layout(location = 0) rayPayloadEXT ReflectionPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1) uniform _SceneDesc { GPUSceneDesc sceneDesc; };
layout(std140, set = 0, binding = 2) readonly buffer _MeshInfo { GPUMeshInfo meshInfos[]; };
layout(std140, set = 0, binding = 3) readonly buffer _ReceiverData { GPUReceiverDataUV receivers[]; };
layout (set = 0, binding = 4, rgba32f) uniform image2D resultImage;

layout(set = 1, binding = 0) uniform _CameraBuffer { GPUCameraData cameraData; };
const float PI  = 3.14159265358979323846264;
void main()
{
    uint randomSeed = initRand(gl_LaunchIDEXT.x, cameraData.frameCount);

    uint receiverId = gl_LaunchIDEXT.x * TEXEL_SAMPLES * TEXEL_SAMPLES;
    ivec2 receiverUv = receivers[receiverId + 0].uvPad.xy;
    bool success = false;
    for(int i = 0; i < receivers[receiverId].uvPad.z; i++) {
        int sampleId = (i + cameraData.frameCount) % receivers[receiverId].uvPad.z;

        vec3 receiverPos = receivers[receiverId + sampleId].pos;
        vec3 receiverNormal = normalize(receivers[receiverId + sampleId].normal.xyz);
        //ivec2 receiverUv = receivers[receiverId + sampleId].uvPad.xy;

        vec3 direction = normalize(getCosHemisphereSample(cameraData.frameCount, vec2(nextRand(randomSeed), nextRand(randomSeed)) , receiverNormal));

        uint  rayFlags = gl_RayFlagsOpaqueEXT;
        float tMin     = 0.0001;
        float tMax     = 10000.0;
    
        vec3 raystartPos = offset_ray(receiverPos, receiverNormal);

        traceRayEXT(topLevelAS,     // acceleration structure
                    rayFlags,       // rayFlags
                    0xFF,           // cullMask
                    0,              // sbtRecordOffset
                    0,              // sbtRecordStride
                    0,              // missIndex
                    raystartPos,     // ray origin
                    tMin,           // ray min range
                    direction.xyz,  // ray direction
                    tMax,           // ray max range
                    0               // payload (location = 0)
        );
	
        if(payload.normal == vec3(0) || dot(payload.normal, direction) <= 0.0) {
        if(payload.normal == vec3(0)) {
        payload.color /= PI;
        }
            if(cameraData.frameCount > 1) {
	            vec3 previousColor = imageLoad(resultImage, receiverUv).rgb;
                vec3 finalColor = mix(min(max(vec3(0),payload.color), vec3(10)), previousColor, float(cameraData.frameCount) / float(cameraData.frameCount + 1));
                imageStore(resultImage, receiverUv, vec4(finalColor, 1.0));
            }
            else {
                imageStore(resultImage, receiverUv, vec4(min(max(vec3(0),payload.color), vec3(1)), 1.0));
            }
            success = true;
            break;
        }
    }
    if(!success) {
        //imageStore(resultImage, receiverUv, vec4(vec3(1,0,0), 1.0));
    }
}