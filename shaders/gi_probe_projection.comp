#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common.glsl"

layout (local_size_x = 256) in;

layout(set = 0, binding = 0) uniform _Config { GIConfig config; };
layout(std140, set = 0, binding = 1) readonly buffer _InputBuffer1 { GPUProbeRaycastResult probeRaycasts[]; };
layout(std430, set = 0, binding = 2) readonly buffer _InputBuffer2 { float probeBasis[]; };
layout(std140, set = 0, binding = 3) buffer _TempBuffer { vec4 tempCalculation[]; };
layout(std140, set = 0, binding = 4) buffer _OutputBuffer { vec4 outColors[]; };
layout(set = 0, binding = 5) uniform sampler2D lightmap;

void main()
{
	uint gID = gl_GlobalInvocationID.x;

	if(gID < config.probeCount * config.rayCount) {
		vec4 color = vec4(1.0);
		if(probeRaycasts[gID].objectId != -1) {
			color = texture(lightmap, vec2(probeRaycasts[gID].u, probeRaycasts[gID].v) / config.lightmapInputSize).rgba;
		}
		else {
			//sample from skybox?
		}
		for(int i = 0; i < config.basisFunctionCount; i++) {
			tempCalculation[gID * config.basisFunctionCount + i] = probeBasis[gID * config.basisFunctionCount + i] * color;
		}
	}

	memoryBarrier();

	//not sure below computation is correct, somehow control it
	if(gID < config.probeCount * config.basisFunctionCount) {
		outColors[gID] = vec4(0);
		uint probe = gID / config.basisFunctionCount;
		uint basis = gID % config.basisFunctionCount;

		for(int j = 0; j < config.rayCount; j++) {
			outColors[gID] += tempCalculation[probe * config.basisFunctionCount * config.rayCount + j * config.basisFunctionCount + basis];
		}
	}
}

/*
TODO
Inputs:
	- Lightmap texture
	- Probe Raycast Results
	- Probe Raycast Basis functions
Calculation:
	- For each probe raycast result, get the corresponding pixel color in lightmap texture
	- Multiply that value with basis functions of the corresponding probe and rayPayloadEXT
	- For each probe, average that value (i.e. divide to number of rays)
Output:
	- (probe count) * (basis function count) vec3/vec4 colors
*/

